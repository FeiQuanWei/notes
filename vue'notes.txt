this.$nextTick(()=>{});
在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，
所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted()钩子函数，
因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。

在数据变化后要执行某个操作时，而这个操作需要根据改变的数据来改变DOM时，这个操作都应该放进.$nextTick()
的回调函数中。

通过声明ref="variable",然后通过this.$refs.variable来获取DOM对象，

在使用this.$nextTick()时，一定要保证DOM已经被渲染，虽然说DOM是数据的自然映射(改变了数据就改变了DOM)，但是DOM发生变化实在
.nextTick()的回调函数中。所以在操作原生DOM的时候，一定要使用.nextTick()，然后在这个接口的回调函数中做事情，

--save：将保存配置信息到pacjage.json。默认为dependencies节点中。
--dev：将保存配置信息devDependencies节点中。
dependencies：运行时的依赖，发布后，即生产环境下还需要用的模块
devDependencies：开发时的依赖。里面的模块是开发时用的，发布时用不到它。

VUE框架对比
    一、vue和react
        1、angular提供的是一整套开发框架，是一款比较重的MVC或MV*框架
        2、vue和react提供的是更多的开放的生态，vue和react都使用了是virtual DOM(虚拟DOM，在js中生成DOM节点)
        3、vue优点：模板和渲染函数弹性选择、简单的语法及项目创建、更快的渲染速度和体积
         react优点：适用于大型应用和更好的可测性、同时适用于web端和原生App端(提供了react native)、更大的生态圈和更多的支持
        4、react和vue相同点:
            利用虚拟DOM来完成快速渲染
            轻量
            响应式组件
            服务端渲染(SSR)
            易于集成路由工具、打包工具及状态管理工具
            优秀的支持和社区

前端框架回顾
    Dojo、spine、emben、prototype、backbone
    vue框架(MV*框架)
        ①Model和view进行绑定
        ②没有控制器概念
        ③数据驱动、状态管理

VUE概况及核心思想
    vue本身并不是一个框架
    vue结合周边的生态可以构成一个灵活的、渐进式框架
    通过MVVM的数据绑定实现自动同步  
    
    model-view-viewModel 
    view(视图Dom)  <->  viewModel(通讯,监听视图和数据，然后通知另一方进行更新)  <->  Model(数据JavaScript对象)

    一、核心思想
        ①数据驱动
        ②组件化

    二、如何实现双向数据绑定
        Object.definePorperty(obj,attr,desc)  给Obj对象添加attr属性，并监听这个对象属性

组件设计原则
    页面上每个独立的可视/可交互区域视为一个组件
    每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护
    页面是组件的容器，组件可以自由嵌套，组成完整的页面

脚手架工具
    帮助开发人员编写好基本代码的工具
    vue-cli可以帮助开发人员搞定目录结构、本地调试、代码部署、单元测试、热加载等

其他知识
    nodejs：基于google v8引擎的JavaScript运行环境
    安装cnpm：npm install -g cnpm --registry=https://registry.npm.taobao.org

vue引用方式
    ①官网拷贝：<script src='http://unpkg.com/vue/dist/vue.js'></script>
    ②通过npm安装vue

vue-cli构建SPA应用
    ①npm install -g vue-cli
    ②vue init webpack-simple demo 或 vue init webpack demo2

项目文件夹解读
    build->打包的配置文件所在的文件夹
        webpackge.base.conf.js -> 打包的核心配置文件
    config->打包的配置
        index.js
    src->存储开发项目的代码
        app.vue->项目的入口组件
        main.js->入口文件
    static -> 静态资源
    babelrc -> es6语法解析的配置文件
    editorconfig -> 编辑器的配置
    gitgnore -> 设置git提交时忽略哪些文件
    postcssrc -> html添加前缀的配置
    index.html -> 单页面入口
    package.json -> 项目的配置文件及基本信息
        dependencies -> 项目本身的依赖库
        devdependencies -> 项目开发的依赖库

vue基本语法
    ①Mustache语法：
        {{ msg }}

    ②html赋值：
        v-html=""

    ③绑定属性：
        v-bind:propertyName = "" 

    ④使用表达式
        {{ ok? "yes" : "no" }}

    ⑤文本赋值
        v-text=""

    ⑥指令：
        v-if=""

    ⑦过滤器
        {{ message|capitalize }} 或 v-bind:propertyName = "value | capitalize"

    ⑧class和style的绑定
        对象语法：
            v-bind:class='{ active(class名):isActive(变量true或者false),'text-danger':hasError }'

        数组语法：
            v-bind:class='{ active,text-danger}'
                    data:{
                        active:'isActive',
                        textDanger:'hasError'
                    }
        style绑定：
            v-bind:style='{color:activeColor,fontSize:fontSize+"px"}'
        
        条件渲染：
            v-if= true显示 false隐藏
            v-else= true隐藏 false显示
            v-else-if= 
            v-show= true显示 false隐(相当于display:none;和display:block,html中会存在代码，但是v-if在html中不会显示代码)
            v-cloak=
        
        事件处理器：
            ①v-on:eventName = 'functionName(方法名称后没有括号)' 或者 @eventName = 'functionName(方法名称后没有括号)'

            ②事件修饰符：
                @click.stop = ''  阻止事件冒泡
                @click.stop.prevent = '' 阻止默认事件
                @click.self = '' 给对象本身绑定事件，如果元素内有子元素，子元素不会有相关事件
                @click.once = '' 只给事件绑定一次
                @keyup.enter = '' 

vue组件
    全局组件和局部组件

    父子组件通讯和数据传递
        父组件通过props向子组件中传递数据
        子组件通过emit事件向父组件中传递数据
    
    组件分全局组价和局部组件，通常做SPA使用局部组件，多页面声明全局组件
    
    slot(插槽)

前端路由=>根据url不同，展示不同页面

    使用情景：
        单页面应用程序，结构不变，只改变内容，

    优点：
        用户体验好，不需要每次都从服务器全部获取，快速的展现给用户
    缺点：
        不利于SEO(搜索引擎优化)
        使用浏览器的前进后退，会重新发起请求，没有合理的运用缓存。
        单页面无法记住前一次滚动条的位置，无法前进，后退的时候会记住滚动条的位置。

router路由
    vue-router构建SPA
    <router-link></router-link>或this.$push({path:''})
    <router-view></router-view>
    动态路由匹配
    嵌套路由
    编程式路由
    命名路由和命名视图

    什么是动态路由
        /user/:{username}  匹配路径：/user/feidage  路由参数：{username:feidage}   同一页面中，根据路由中的参数不同，页面的数据不同
        @在webpack.base.conf.js里映射到src文件夹下

    嵌套路由    
       路由里嵌套路由
       在路由总定义子路由，在页面中使用<router-link to=''></router-link>和<router-view></router-view>
    
    编程式路由
        通过js实现页面的跳转
        $router.push('name');
        $router.push({path:''});
        $router.push({path:'name?a=12'}) 或 $router.push({path:'name',query:{a:123,b:456}})
        $router.go(1);
        页面与页面之间传递参数使用query
        组件与组件之间传递参数使用params
        
    命名路由和命名视图
        给路由定义不同的名字，根据名字进行匹配
        给不同的router-view定义名字，通过名字进行对应组件的渲染
        params:路由参数，通过参数的不同展示不同的数据
        query:页面跳转参数，页面进行相关使用的参数


vue-resource(异步请求插件)
    ①使用cdn方式 <script src='https://cdn.jsdelivr.net/vue.resource/1.3.1/vue-resource.min.js'>
    ②使用npm安装 npm i vue-resource --save

    插件提供的api:
        get(url,[options]);从服务器端拿数据
        head(url,[options]);
        delete(url,[options]);
        jsonp(url,[options]);
        post(url,[options]);
        put(url,[body],[options]);
        patch(url,[body],[options]);

        先关API参数
            url:[string],请求的url地址
            method:[string],请求的HTTP方法，
            body:[Object,FormDatastring],发送post请求时携带的一些参数，request body
            params:[Object],发送get请求时的参数，
            headers:[Object],调用第三方服务时，需要在请求头中注入某些参数，request headers
            timeout:[number],单位为毫秒的请求超时时间，0表示无超时时间
            before:[function(request)],请求发送前的处理函数，类似于jQuery的beforeSend函数
            progress:[function(event)],ProgressEvent回调处理函数
            credientials:[boolean],表示跨域请求时是否需要使用凭证，可以通过credientials设置当前发送请求的用户是谁
            emulateHTTP:[boolean],在请求头中设置X-HTTP-Mehtod-Override
    get请求
        this.$http.get(
            "url",
            {
                params:{
                    [arguments]
                },
                header:{

                }
            }
        ).then(res=>{
            [res.data]
        },error=>{
            [error]
        })

    post请求
        this.$http.post(
            "url",
            {
                [arguments]
            },
            {
                headers:{

                }
            }
        ).then(res=>{
            [res.data]
        },error=>{
            [error]
        })

    jsonp请求
        this.$http.jsonp(
            "url",
            {
                params:{

                },
                jsonp:"callback"   ->
            }
        ).then(res=>{
            [res.data]
        })

    http请求
        this.$http({
            url:"",
            params:{

            },
            headers:{

            },
            timeout:5,
            before:function(){
                发送请求之前的处理函数
            }
        }).then(res=>{
            [res.data]
        })

全局拦截器interceptors
    Vue.http.interceptors.push((request,response)=>{
        请求发送前的逻辑处理
        next((response)=>{
            请求发送后的逻辑处理
            根据请求状态，response参数会返回给successCallback或errorCallback
            return response;
        })
    })

axios = Vue-resource
    axios.request(config);
    axios.get(url[,config]);
    axios.delete(url[,config]);
    axios.head(url[,config]);
    axios.options(url[,config]);
    axios.post(url[,data[,config]]);
    axios.put(url[,data[,config]]);
    axios.patch(url[,data[,config]]);

    get请求
        axios.get(
            "url",
            {
                params:{
                    [arguments]
                },
                headers:{

                }
            }
        ).then(res=>{
            [res.data]
        }).catch(error=>{
            [error]
        })
    
    post请求
        axios.post(
            "url",
            {
                [arguments]
            },{
                headers:{

                }
            }
        ).then(res=>{
            [res.data]
        }).catch(error=>{
            [error]
        })
    
    http请求
        axios({
            url:"",
            data:{  ->post请求携带的参数
                [arguments]
            },
            params:{ ->get请求携带的参数
                [arguments]
            },
        }).then(res=>{
            [res.data]
        }).catch(error=>{
            [error]
        })




        优点
    1.容易上手
    2.比较轻量
    3.一个MVVM的框架(库)

vue和angular区别
    vue-简单易学(中文)，angualr-英文
    angular-上手难
    vue比较适合移动端项目，angular更适合使用PC端项目
    vue和angular不兼容低版本IE

vue动态参数
    v-bind:[property]="value"
    property不能有大写，否则将不会绑定到html特性上





由于JavaScript的限制，vue不能检测以下情况做出响应式
    ①利用数组索引，直接改变数组中的某个元素
    ②改变数组的长度
    以上情况发生时，vue不会做出响应式
    可以分别使用vm.$set(Array,index,newValue)和vm.items.splice(newLength)解决vue未做出响应式的问题

由于JavaScript的限制，vue不能检测对象的属性添加和删除
    Vue.set(object, key, value)
    当你如果想向一个对象中添加多个属性时，可以使用以下方法
    vm.object = Object.assign({},vm.object,{
        age:17,
        name:"asdf"
    })

每用一次组件，都又一个新的实例被创建

单向数据流
    $prop和$attr
    如果你不希望组件的根元素继承特性，你可以在组件的选项中设置 
        inhertAttrs:false
        Vue.component('my-component', {
            inheritAttrs: false,
        })
    ******注意 inheritAttrs: false 选项不会影响 style 和 class 的绑定

    过去我们给子组件传值时，需要在子组件上用props注册一些属性，
    eg:
        <template>
                <div>
                    props:{{name}},{{age}} 或者 {{$props['name']}},{{$props['age']}}
                </div>
        </template>
        export default({
            props:[name,age];
        })
        然后父组件调用时当属性传值
            <child :name="fick" :age="16"></child>
    
        如果我们没有在子组件中通过props注册属性，那么我们就要通过$attrs来获取属性值
        eg:
            <child name="rick" :age="18" gender="male"></child>

            <template>
                <div>
                    props:{{name}},{{age}} 或者 {{$props['name']}},{{$props['age']}}
                    $attr:{{$attrs["gender"]}}
                </div>
            </template>
            export default({
                props:[name,age];
            })

插槽slot:
    具名插槽：
        写法①：v-slot:header 
        写法②：#header

过渡
    当仅使用JavaScript过渡时，对使用过渡的元素加上v-bind:css="false"，避免css对过渡的影响

    appear初始渲染，可以使用动画类，也可以使用JavaScript钩子
        ①使用动画类：
            <transition
                appear
                appear-class="custom-appear"   -->初始状态
                appear-to-class="custom-appear-to-appear"  -->结束状态
                appear-active-class="custom-appear-active-appear">  --初始到结束完成的动画
            </transition>
        
        ②JavaScript钩子：
            <transition 
                appear
                @before-appear="customBeforeAppearHook"  -->渲染之前执行的函数
                @appear="customAppearHook"  -->渲染开始时执行的函数
                @after-appear="customAfterAppearHook"  -->渲染开始后执行的函数
                @appear-cancelled="customAppearCancelledHook">  -->渲染结束后执行的函数
            </transition>

多个元素过渡
    当有相同标签的元素时，需要加入v-key用以区分
        eg:
            <transition>
                <button v-if="isEditing" key="save">
                    Save
                </button>
                <button v-else key="edit">
                    Edit
                </button>
            </transition>
        
mixins混入对象
    ①基础
        声明混入对象
            var myMixin = {
                created:function(){
                    this.hello()
                },
                methods:{
                    hello:function(){
                        console.log('say hello');
                    }
                }
            }
        定义使用混入对象的组件
            var Component = Vue.extend({
                mixins: [myMixin]
            })
        调用组件
            var component = new Component();  console result=>say hello
    
    ②选项合并
        同属性名的属性已自身实例为准，
        同名的钩子函数，将混合为数组，都执行，混入对象的钩子将在自身的钩子函数之前执行，当属性名冲突时，以组件自身的属性为主

    ③全局混入
        谨慎使用全局混入对象，因为会影响到每个单独创建的 Vue 实例 (包括第三方模板)
    
    ④自定义选项合并=>覆盖已有值
        Vue.config.optionMergeStrategies.myoption = function(){

        }

自定义指令=>directive
    全局自定义指令
        <input type='text' v-focus/>
        Vue.directive('focus[指令名称]',{
            inserted:function(el){  //指令触发时间
                el.focus();         //el:被绑定指令的元素
            }
        })
    
    局部自定义指令
        <input type='text' v-focus/>
        new Vue({
            el:"",
            directive:{
                focus:{
                    inserted:function(el){
                        el.focus();
                    }
                }
            }
        }
    
    钩子函数:
        bind:只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。

        inserted:被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。

        update:所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，
                也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。

        componentUpdated:指令所在组件的 VNode 及其子 VNode 全部更新后调用。

        unbind:只调用一次，指令与元素解绑时调用。
    
    函数简写
        在很多时候，你可能想在 bind 和 update 时触发相同行为，而不关心其它的钩子
        Vue.directive('',function(el,binding){  //el:js对象
            el.style.backgroundColor = binding.value
        })
    
    对象字面量
        如果指令需要多个值，可以传入一个 JavaScript 对象字面量。记住，指令函数能够接受所有合法的 JavaScript 表达式。
        <div v-demo="{color: 'white', text: 'hello!'}"></div>
        Vue.directive('demo',function(el,binding){
            console.log(binding.value.color) // => "white"
            console.log(binding.value.text)  // => "hello!"
        })

渲染函数render
    ①Vue.component('',{
        render:function(){
            return ;
        }
    })

    使用渲染函数替代相关指令[v-if、v-for、v-model]
        ①替代v-if、v-for
            <ul v-if='item.length'>
                <li v-for='item in items'>{{item.name}}</li>
            </ul>
            <p v-else>No items found</p>
            Vue.component('',{
                props:[items],
                render:function(createElement){
                    if(items.length){
                        return createElement('ul',this.items.map(function(item){
                            return createElement('li',item.name)
                        }))
                    }else{
                        return createElement('p', 'No items found.')
                    }
                }
            })

        ②替代v-model
            Vue.component('',{
                render:function(createElement){
                    var _self = this;  this=>这个input元素=>js对象
                    return createElement('input',{
                        domProps:{
                            value:_self.value
                        },
                        on:{
                            input:function(){
                                _self.$emit('input',event.target.value)
                            }
                        }
                    })
                }
            })

插件
    使用插件
        ①通过全局方法Vue.use()，在new Vue()之前调用插件
        
Vue.component()和Vue.use()
    ①Vue.component(parameter1,parameter2);有两个参数，第一个参数是自定义元素名称，第二个参数是将要注册的Vue组件
        eg：
            import ele from 'ele.vue'
            Vue.component('ele',ele)
    
    ②Vue.use();这个方法接受一个对象，这个对象里必须要有install方法，Vue.use();内部会自动调用这个方法(install);
        如果该插件没有被注册过，那么，第一次注册插件成功后会为插件添加一个installed的属性，值为true，Vue.use()方法会检测插件的installed属性，
        避免重复注册。
        插件的install方法接受两个参数，第一个参数Vue,第二参数是配置项option
        在install方法内部可以添加全局方法或者属性、全局指令、mixin混入、添加实例方法、使用Vue.component()注册组件等。
    
过滤器
    ①<!-- 在双花括号中 -->
        {{ message | capitalize }}
    
    ②<!-- 在 `v-bind` 中 -->
        <div v-bind:id="rawId | formatId"></div>
    
    ③自定义本地过滤器
        eg:
            filters: {
                capitalize: function (value) {
                    if (!value) return ''
                    value = value.toString()
                    return value.charAt(0).toUpperCase() + value.slice(1)
                }
            }
    
    ④自定义全局过滤器
        eg:
            Vue.fileter('capitalize',function(value){
                if (!value) return ''
                value = value.toString()
                return value.charAt(0).toUpperCase() + value.slice(1)
            });

            new Vue({});
    
    ⑤串联过滤器
        eg:
            {{ message | filterA | filterB }}
            message传入filterA中后继续传入filterB中，最后被返回
    
    ⑥接受多个参数的过滤器
        eg:
            {{message | filterA(arg1,arg2)}}
            message为第一个参数，arg1为第二个参数，arg2位第三个参数
