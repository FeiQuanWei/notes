https://www.jianshu.com/p/31744aa44824

浏览器输入网站按下回车后进行了哪些操作
  1、解析域名
  2、发送http请求，
  3、服务器获得请求，浏览器得到代码
  4、解析HTML代码，加载HTML代码所需资源
  5、呈献给用户

浏览器的本地存储
  localstorage、sessonstorage  都是5M
  localstorage
    存储时间长，
  sessonstorage 
    存储时间仅限为当前窗口关闭前

网页优化方式
  标签语义化
  减少http请求
  将样式表放在头部，脚本放在底部，更快的渲染出页面
  压缩合并css、js代码
  图片压缩

标签语义化的含义
  没有css样式时，可以更直观的展示页面的结构
  方便后期维护
  方便其他设备解析
  有利于seo

html5的新特性
  本地存储
  标签语义化
  多媒体
  canvas
  地理定位
  拖拽

cookie的好处和弊端
  因为cookie中携带用户相关信息，提高了网站用户体验度

  cookie是随着http请求一起被发送，可能会浪费一些带宽
  相比于浏览器的本地存储，cookie存储的内容更小仅有4k
  cookie中携带着用户的相关信息，如果被拦截，用户信息会被泄露
  每个特定的域名下，cookie的个数有限制

前端页面的三层结构
  表现层css，结构层html和动作层js

优雅降级和渐进增强
  优雅降级：开始先构建一套完整的功能，然后针对低版本浏览器进行兼容
  渐进增强：开始先针对低版本浏览器进行构建页面，然后针对高级浏览器进行功能修改，达到更好的用户体验度

link和import的区别
  ①link是html标签，不仅能导入样式，还可以定义rel，rss等属性
    import是css提供的语法规则，只能导入css样式

  ②link引入的css和页面同时加载，import是当页面完全加载完成后被加载，

  ③import有兼容性问题，link没有兼容性问题

闭包问题
  什么是闭包:有外层函数、有被保护的变量、有返回值、返回值为一个函数
  优点：保护了变量不受外部干扰，防止全局污染，增强了封装性
  缺点：闭包中的变量，会一直存在于内存中，造成内存浪费

href和src的区别
  href表示超文本引用
  src是物件的引用

JavaScript原型与原型链
  对象没有原型链，只有原型
  函数即有原型链又有原型

apply和call的区别
  相同点
    1、都用来改变一个函数中的this指向
    2、
  不同点
    1、参数不一样
    2、使用情况不一样
        Function.apply(obj1,args)当括号中第二个参数与Function中所需的参数排列一直时，使用
        不一致时使用Function.call()

同步和异步
  同步：客户端发送请求后，在服务器端返回响应之前，客户端处于等待状态，
  异步：客户端发送请求后，在服务器端返回响应之前，客户端可以进行其他操作

原生ajax
  //1.创建ajax对象
  var xmlHttp = null;
	if(window.XMLHttpRequest){
		req = new XMLHttpRequest();
	}else{
		req = new ActiveXObject("Microsoft.XMLHTTP");
	}
  //2.绑定监听函数
  xmlHttp.onreadystatechange = function(){
      //判断数据是否正常返回
      if(xmlHttp.readyState==4&&xmlHttp.status==200){
          //6.接收数据
          var res = xmlHttp.responseText;
          document.getElementById("span1").innerHTML = res;
      }
  }
  //3.绑定处理请求的地址,true为异步，false为同步
  //GET方式提交把参数加在地址后面?key1:value&key2:value
  xmlHttp.open("POST","/ajax/ajax1",true);
  //4.POST提交设置的协议头（GET方式省略）
  xmlHttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
  //POST提交将参数，如果是GET提交send不用提交参数
  //5.发送请求
  xmlHttp.send("name=zjj&age=18");

  0,1,2,3,4
  0：尚未请求,未调用open()
  1：开始请求数据，但还没有发送,还没有调用 send()
  2、服务器端收到请求，但未处理
  3、开始处理数据
  4、服务器端处理完数据，并返回结果

服务器相关状态
  HTTP: Status 1xx  (临时响应)
  ->表示临时响应并需要请求者继续执行操作的状态代码。
    HTTP: Status 100 (继续)
    -> 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。
    HTTP: Status 101 (切换协议)
    -> 请求者已要求服务器切换协议，服务器已确认并准备切换。

  HTTP Status 2xx  (成功)
  ->表示成功处理了请求的状态代码;
    HTTP Status 200 (成功)
    -> 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。
    HTTP Status 201 (已创建)
    -> 请求成功并且服务器创建了新的资源。
    HTTP Status 202 (已接受)
    -> 服务器已接受请求，但尚未处理。
    HTTP Status 203 (非授权信息)
    -> 服务器已成功处理了请求，但返回的信息可能来自另一来源。
    HTTP Status 204 (无内容)
    -> 服务器成功处理了请求，但没有返回任何内容。
    HTTP Status 205 (重置内容)
    -> 服务器成功处理了请求，但没有返回任何内容。
    HTTP Status 206 (部分内容)
    -> 服务器成功处理了部分 GET 请求。

HTTP Status 4xx (请求错误)
->这些状态代码表示请求可能出错，妨碍了服务器的处理。
  HTTP Status 400 （错误请求）
  ->服务器不理解请求的语法。
  HTTP Status 401 （未授权）
  ->请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。
  HTTP Status 403 （禁止）
  -> 服务器拒绝请求。
  HTTP Status 404 （未找到）
  ->服务器找不到请求的网页。
  HTTP Status 405 （方法禁用）
  ->禁用请求中指定的方法。
  HTTP Status 406 （不接受）
  ->无法使用请求的内容特性响应请求的网页。
  HTTP Status 407 （需要代理授权）
  ->此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。
  HTTP Status 408 （请求超时）
  ->服务器等候请求时发生超时。
  HTTP Status 409 （冲突）
  ->服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。
  HTTP Status 410 （已删除）
  -> 如果请求的资源已永久删除，服务器就会返回此响应。
  HTTP Status 411 （需要有效长度）
  ->服务器不接受不含有效内容长度标头字段的请求。
  HTTP Status 412 （未满足前提条件）
  ->服务器未满足请求者在请求中设置的其中一个前提条件。
  HTTP Status 413 （请求实体过大）
  ->服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。
  HTTP Status 414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。
  HTTP Status 415 （不支持的媒体类型）
  ->请求的格式不受请求页面的支持。
  HTTP Status 416 （请求范围不符合要求）
  ->如果页面无法提供请求的范围，则服务器会返回此状态代码。
  HTTP Status 417 （未满足期望值）
  ->服务器未满足”期望”请求标头字段的要求。

HTTP Status 5xx （服务器错误）
->这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。
  HTTP Status 500 （服务器内部错误）
  ->服务器遇到错误，无法完成请求。
  HTTP Status 501 （尚未实施）
  ->服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。
  HTTP Status 502 （错误网关）
  ->服务器作为网关或代理，从上游服务器收到无效响应。
  HTTP Status 503 （服务不可用）
  -> 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。
  HTTP Status 504 （网关超时）
  ->服务器作为网关或代理，但是没有及时从上游服务器收到请求。
  HTTP Status 505 （HTTP 版本不受支持）
  -> 服务器不支持请求中所用的 HTTP 协议版本。