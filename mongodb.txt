数据库分类
  关系型数据库:建立在关系模型基础上的数据库
    
  菲关系型数据库
    关系型数据库的阉割版，把少用或者根本不用的功能去掉，大幅度提高产品性能
  
在mongodb中数据表叫做集合，集合中一行一行的数据叫做文件

快速存储能力和方便迅速查询能力

基本命令
  show dbs  =>查看所有数据库

  db.version()  =>查看当前数据库版本

  use 数据库名称  =>进入某个数据库，如果数据的数据库不存在，会创建这个数据库，并进入

  show collections  =>展示数据库下的所有集合

  db  =>查看当前所在数据库
  
  db.dbName(数据库名称).insert()  =>向数据库中插入数据
    eg:db.user.insert({"name":"asdf"})

  db.dbName(数据库名称).find()  =>找到当前集合下的所有数据
    eg:db.user.find()
       db.user.find({name:1})  =>查找数据库中name = 1的所有数据，

       当我们想让查找到的数据只显示某些字段时可以这么写
       db.user.find({name:1},{name:true,age:true})
       查找数据库中name=1的所有数据，并只显示name和age字段

  db.dbName(数据库名称).findOne()  =>找到当前集合下的第一条数据
    eg:db.user.findOne() 

  db.dbName(数据库名称).update()  =>更改某条数据
    eg:db.user.update({"name":"asdf"},{"name":"qwer","age":16})
      将名字为asdf的这条数据改为name = qwer,age = 16

  db.dbName(数据库名称).remove()  =>删除指定数据
    eg:db.user.remove({"name":"玉皇大帝"})

  db.dbName.drop()  =>删除整个集合
    eg:db.user.drop()

  db.dropDatabase()  =>删除当前所处在的集合

  db.dbName.insert([{},{}])  =>批量插入  
    eg:db.user.insert([
      {"_id":1},
      {"_id":2},
      {"_id":3},
    ])
    低版本使用de.dbName.batchInsert()
    批量插入时，数据最好不要超过48M
  

js写mongodb命令
  eg:
    var name = "asdf"
    var time = Date.parse(new Date())
    var jsonStr = {"username":name,"time":time}
    var db = connect('log')  =>连接到集合，相当于use dbName
    db.login.insert(jsonStr)  =>连接到集合，相当于use dbName
    print('success');

update修改
  update常见错误
    当给mongodb更新数据时，使用db.dbName(数据库名).update({},{})
      eg：db.user.update({name:1},{name:2})
      当name=1这条数据更新后，此条数据仅剩name一个字段，
      正确的修改方式
        eg:db.user.update({name:1},obj)   ;第二个参数为正确的对象数据
        
  update修改器
    $set修改器，修改指定数据的指定字段的值或者向指定数据添加某个字段
      var db = connect('dbName=>数据库名字')
      db.collections=>集合名字.update(
        {name:1},  =>查找数据条件
        {
          $set:  {sex:2,age:20} =>要修改的数据及相关值 
        }  
      )

      修改内嵌数据时
        db.collections=>集合名字.update(
          {name:1},  =>查找数据条件
          {
            $set:  {"skill.SkillThree":"word"} =>要修改的数据及相关值 
          }  
        )
    
    $unset删除=>删除指定字段
      var db = connect('dbName');
      db.collections.update({name:"1"},{$unset:{"name":""}}) 
        =>删除name = 1这条数据的name字段

    $inc  操作某条数据字段的值
      var db = connect('dbName')
      db.collections.update({name:"1"},{$inc:{age:-2}})  
        =>使用$inc时可直接操作字段的值
    
    **multi选项  有坑，物踩
      当要为集合中所有数据添加字段时,因为要给所有数据添加字段，所以条件不填
        db.collections.update({},{$set,{"intreset":[]}})
        执行完此条语句后你会发现，只有数据库中的第一条数据被添加了"intreset"字段
      如果想为所有数据添加字段需添加multi选项
        db.collections.update({},{$set,{"intreest":[]}},{multi:true});
      
    upsert选项
      当想要更新集合中某条数据的某个值，但是这条数据不存在时，使用
      db.collections.update({"name":1},{$set:{age:1}},{upsert:true})
      使用该选项，当数据库中不存在name = 1的数据时，会自动向数据库中插入该条数据，name=1,age=2

    upsert和multi可简写
      db.collections.update({name:1},{进行操作},upsert,multi);

  update数组修改器
    $push修改器
      当一个字段的值为数组时，可以使用push向数组中追加值
      eg:db.dbName.update({name:1},{$push:{interest:{"basketball"}}})

    向内嵌数据追加值
      eg:db.dbName.update({name:1},{$push:{"skill.SkillFour":{"basketball"}}})
    
    $ne修改器
      查找数据中某条数据中指定字段是否有该值，如果有，则不添加，如果没有，就添加此值
      db.dbName.update({name:1,interest:{$ne:"playgame"},{$push:{interest:"playgame"}})

    $addToSet修改器  是$ne的升级版
      db.dbName.update({name:1},{$addToSet:{interest:{"readbook"}}})
      查找数据库中name=1的数据，如果该条数据中interest字段没有"readbook"该值，就向
      该字段中添加该值

    $each修改器  =>批量追加
      var curArry = ["sing","dance","speak"]
      db.dbName.update({name:1},{interset:{$each:curArry}})
      添加功能，如果有则添加，如果没有则不添加
      db.dbName.update({name:1},{$addToSet:{interset:{$each:curArry}}})

    $pop修改器 有两个参数，第一个参数1/-1，-1表示从数组末端开始删除，1表示从头部开始删除
      db.dbName.update({name:1},{$pop:{interest:1}})
      查找到name=1的数据，并将字段"interest"的值从开头删除一个 ，1表示从开头删除

    数组定位修改
      db.dbName.update({name:1},{$set:{"interest.2":"asdf"}})
      查找到name=1的数据，并将字段"interest"的值的第二位改成"asdf"

  状态返回与安全
    非应答式操作 => 进行数据库操作后，并没有任何返回值
      
    应答式操作 =>进行数据库操作后，返回某值

    db.runCommend()  => 命令，可以执行数据库命令，是数据库命令的执行器
      eg:db.collections.update({},{},false,true);
        db.runCommend({getLastError:1})
        getLastError:1   =>  表示返回功能错误
    
    findAndModify
      var myMostify = {
        findAndModify:collections  =>  集合名称
        query:{name:"asdf"},  =>  查找条件
        update:{$set:{age:18}},  =>  更改的目标key及value
        new:true  =>  true表示返回修改后的数据，false表示返回修改前的数据
      }
      var resultMessage = db.runCommend(myMostify)

查询
  find的不等边修饰符
    小于($lt):less-than
      db.collections.find(
        {age:{$lt:40,$gt:18}},
        {name:true,age:true}
      )
      查找数据库中年龄小于40大于18的所有数据，并只显示name和age
      
    小于等于($lte):less-than-equal
    大于($gt):greater-than
    大于等于($gte):greater-than-equal
    不等于($ne):not-equal
  
  多条件查询
    $in  =>  一个key多个value
      db.collections.find({age:{$in:[25,33]}},{name:true})
      查询集合中年龄为25和33的所有数据，并只显示name字段

    $nin与$in相反，查询数据库中除了...以外的所有数据

    $or  =>  多个条件满足一个即可
      db.collections.find({$or:[{age:{$gte:30}},{"skill.skillThree":'PHP'}]})
      查询集合中年龄大于30岁，或者第三个技能是php的所有数据
    
    $not  =>  除了查询条件之外的信息
      db.collections.find({age:{$not:{$lt:30,$gt:20}})
  
  find的数组查询
    db.collections.find({interest:["画画","聚会","看电影"]},{name:true,_id:false,age:1})
    当查询的条件带[]时，表示要与数据库内响应字段的值完全匹配才能被查找到，

    $all修改器
      db.collections.find({interest:{$all:["画画","聚会"]}})
        查询数据库中字段interest字段的值包含"画画","聚会"的所有数据

    $in  =>  一个key多个value
      db.collections.find({interest:{$in:[25,33]}},{name:true})
        查询数据库中字段interest字段的值包含"画画"或者"聚会"的所有数据
    
    $size
      db.collections.find({interest:{$size:5}},{})
        查找数据库中interest字段的值的长度为5的数据
    
    $slice
      db.collections.find({interest:{$size:5}},{name:1,interest:{$slice:1}})
        查找数据库中interest字段的值的长度为5的数据,但是查找到的数据只显示interest字段的第一项，1表示从头开始显示一项，-1表示从末尾开始显示一项
  
  find参数使用方法
    db.collections.find(query,fields,limit,skip,sort)
    query => 查询条件 
    fields => 查询到的结果的显示样式 true为显示，false为不显示
    limit => 控制返回结果的数量
    skip => 跳过多少个显示
    sort => 排序  1为正序，-1为倒序
  
  $where
    db.collections.find({$where:"this.age>30"},{})
    $where不仅可以跟随JavaScript表达式，还可以跟随函数

在js语句中使用find
  hasNext()
    eg:
      var db = connect('company')
      var result = db.workmate.find();
      while(result.hasNext()){
        printjson(result)
      }

mongodb的索引  
  不使用索引的情况
    数据不过万时，不建议使用索引；
    查询数据超过总数据的30%时，

  查看索引
    db.collections.getIndexes()
    查看该集合中那个字段被设置为索引
    
  建立索引  =>  每个集合最多建立64个索引
    => 3.0之前版本使用db.collections.ensureIndex() 之后使用db.collections.createIndex()
    db.collections.ensureIndex({username:1})  1表示true，代表给username建立索引

  符合索引
    把数据的两个以上的字段设置为索引
  
  指定索引查询
    db.collections.find({}).hint({索引键值:1})  1表示为true
  
  删除索引
    db.collections.dropIndex(indexName);  indexName为查询到的索引列表中的name属性的值

  全文索引
    在字段的值中想要检索到某些关键字时，需要全文索引
    db.collections.createIndex({key:"text"});   => "text"表示对这个字段设置了全文索引

    $text  =>  使用全文索引  $search => 检索关键字
      db.collections.find({$text:{$search:"programmer"}}) 

      检索多个单词
      db.collections.find({$text:{$search:"programmer drink play"}}) 
      "programmer drink play" 字符串之间是 "||" 的关系，不是 "&&" 关系

      不希望查找到有相关单词的记录
      db.collections.find({$text:{$search:"programmer drink -play"}}) 

      查找字符，但是字符之间有空格  =>  使用转义字符
      db.collections.find({$text:{$search:" \"qwer asdf \" zxcv "}})
      查找"qwer asdf"或"zxcv" 

管理MongoDB
  创建用户
  db.createUser({
    user:"feiquanwei",  =>  用户名
    pwd:"123456",  =>  密码
    customData:{  =>  用户备注
      name:"技术",  =>  备注用户名
      email:"",  =>  邮箱
      age:18  =>  邮箱
    },
    ①roles:['read']  =>  权限，这种写法是给所有的库设置权限

    ②roles:[{   =>  这种写法是给用户设置指定的库的权限
      role:"",  =>  权限名
      db:"company"  =>  数据库名
    }]  =>  权限
  })

查询用户
  db.system.users.find()  查询数据库中所有用户

删除用户
  db.system.users.remove({user:"用户名"})

建权(建立权限)
  db.auth("username","pwd");  返回1成功，返回0失败
  建权成功后需要重启mongodb服务器，不能使用mongod启动服务器，使用mongod --auth启动服务器
  使用建权启动服务器后，不能再使用mongo链接数据库了，需使用建权的用户名和密码链接，mongo -u "用户名" -p "密码" ip地址/admin(数据库名)

备份和还原
  备份
    备份整个数据库
      mongodump
        --host 127.0.0.1  => ip
        --port 27017  => 端口号
        --out D:/databack/backup  => 备份到的位置

    备份指定集合
      mongodump
        --host 127.0.0.1  => ip
        --port 27017  => 端口号
        --out D:/databack/backup  => 备份到的位置
        --collection myCollections  => 备份的集合
        --db test  => 备份的库
        --username username
        --password password
  还原
    mongorestore
    --host 127.0.0.1
    --port 27017
    --username username
    --password password
    <path to the backup>  =>  曾经备份到的地址
